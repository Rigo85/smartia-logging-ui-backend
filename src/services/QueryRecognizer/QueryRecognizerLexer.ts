// Generated from QueryRecognizer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class QueryRecognizerLexer extends Lexer {
	public static readonly PHRASE = 1;
	public static readonly FIELD_NAME = 2;
	public static readonly LPAREN = 3;
	public static readonly RPAREN = 4;
	public static readonly COLON = 5;
	public static readonly NOT = 6;
	public static readonly OR = 7;
	public static readonly AND = 8;
	public static readonly WORD = 9;
	public static readonly WS = 10;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"PHRASE", "FIELD_NAME", "LPAREN", "RPAREN", "COLON", "NOT", "OR", "AND", 
		"WORD", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'('", "')'", "':'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "PHRASE", "FIELD_NAME", "LPAREN", "RPAREN", "COLON", "NOT", 
		"OR", "AND", "WORD", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(QueryRecognizerLexer._LITERAL_NAMES, QueryRecognizerLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return QueryRecognizerLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(QueryRecognizerLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "QueryRecognizer.g4"; }

	// @Override
	public get ruleNames(): string[] { return QueryRecognizerLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return QueryRecognizerLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return QueryRecognizerLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return QueryRecognizerLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\f\xAA\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x03\x02\x03\x02\x03" +
		"\x02\x03\x02\x07\x02\x1C\n\x02\f\x02\x0E\x02\x1F\v\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x07\x02&\n\x02\f\x02\x0E\x02)\v\x02\x03\x02\x05" +
		"\x02,\n\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x05\x03\x7F\n\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06" +
		"\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07" +
		"\x8E\n\x07\x03\b\x03\b\x03\b\x03\b\x05\b\x94\n\b\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x05\t\x9C\n\t\x03\n\x03\n\x06\n\xA0\n\n\r\n\x0E\n\xA1\x03" +
		"\v\x06\v\xA5\n\v\r\v\x0E\v\xA6\x03\v\x03\v\x02\x02\x02\f\x03\x02\x03\x05" +
		"\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13" +
		"\x02\v\x15\x02\f\x03\x02\x07\x04\x02$$^^\x04\x02))^^\t\x02\v\f\x0F\x0F" +
		"\"\"$$)+//<<\b\x02\v\f\x0F\x0F\"\"$$)+<<\x05\x02\v\f\x0F\x0F\"\"\x02\xBD" +
		"\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
		"\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02" +
		"\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
		"\x15\x03\x02\x02\x02\x03+\x03\x02\x02\x02\x05~\x03\x02\x02\x02\x07\x80" +
		"\x03\x02\x02\x02\t\x82\x03\x02\x02\x02\v\x84\x03\x02\x02\x02\r\x8D\x03" +
		"\x02\x02\x02\x0F\x93\x03\x02\x02\x02\x11\x9B\x03\x02\x02\x02\x13\x9D\x03" +
		"\x02\x02\x02\x15\xA4\x03\x02\x02\x02\x17\x1D\x07$\x02\x02\x18\x1C\n\x02" +
		"\x02\x02\x19\x1A\x07^\x02\x02\x1A\x1C\v\x02\x02\x02\x1B\x18\x03\x02\x02" +
		"\x02\x1B\x19\x03\x02\x02\x02\x1C\x1F\x03\x02\x02\x02\x1D\x1B\x03\x02\x02" +
		"\x02\x1D\x1E\x03\x02\x02\x02\x1E \x03\x02\x02\x02\x1F\x1D\x03\x02\x02" +
		"\x02 ,\x07$\x02\x02!\'\x07)\x02\x02\"&\n\x03\x02\x02#$\x07^\x02\x02$&" +
		"\v\x02\x02\x02%\"\x03\x02\x02\x02%#\x03\x02\x02\x02&)\x03\x02\x02\x02" +
		"\'%\x03\x02\x02\x02\'(\x03\x02\x02\x02(*\x03\x02\x02\x02)\'\x03\x02\x02" +
		"\x02*,\x07)\x02\x02+\x17\x03\x02\x02\x02+!\x03\x02\x02\x02,\x04\x03\x02" +
		"\x02\x02-.\x07c\x02\x02./\x07r\x02\x02/0\x07r\x02\x0201\x07p\x02\x021" +
		"2\x07c\x02\x0223\x07o\x02\x023\x7F\x07g\x02\x0245\x07/\x02\x0256\x07c" +
		"\x02\x0267\x07r\x02\x0278\x07r\x02\x0289\x07p\x02\x029:\x07c\x02\x02:" +
		";\x07o\x02\x02;\x7F\x07g\x02\x02<=\x07j\x02\x02=>\x07q\x02\x02>?\x07u" +
		"\x02\x02?@\x07v\x02\x02@A\x07p\x02\x02AB\x07c\x02\x02BC\x07o\x02\x02C" +
		"\x7F\x07g\x02\x02DE\x07/\x02\x02EF\x07j\x02\x02FG\x07q\x02\x02GH\x07u" +
		"\x02\x02HI\x07v\x02\x02IJ\x07p\x02\x02JK\x07c\x02\x02KL\x07o\x02\x02L" +
		"\x7F\x07g\x02\x02MN\x07v\x02\x02NO\x07k\x02\x02OP\x07o\x02\x02PQ\x07g" +
		"\x02\x02QR\x07u\x02\x02RS\x07v\x02\x02ST\x07c\x02\x02TU\x07o\x02\x02U" +
		"\x7F\x07r\x02\x02VW\x07/\x02\x02WX\x07v\x02\x02XY\x07k\x02\x02YZ\x07o" +
		"\x02\x02Z[\x07g\x02\x02[\\\x07u\x02\x02\\]\x07v\x02\x02]^\x07c\x02\x02" +
		"^_\x07o\x02\x02_\x7F\x07r\x02\x02`a\x07f\x02\x02ab\x07c\x02\x02bc\x07" +
		"v\x02\x02c\x7F\x07c\x02\x02de\x07/\x02\x02ef\x07f\x02\x02fg\x07c\x02\x02" +
		"gh\x07v\x02\x02h\x7F\x07c\x02\x02ij\x07f\x02\x02jk\x07c\x02\x02kl\x07" +
		"v\x02\x02lm\x07c\x02\x02mn\x07a\x02\x02no\x07g\x02\x02op\x07z\x02\x02" +
		"pq\x07c\x02\x02qr\x07e\x02\x02r\x7F\x07v\x02\x02st\x07/\x02\x02tu\x07" +
		"f\x02\x02uv\x07c\x02\x02vw\x07v\x02\x02wx\x07c\x02\x02xy\x07a\x02\x02" +
		"yz\x07g\x02\x02z{\x07z\x02\x02{|\x07c\x02\x02|}\x07e\x02\x02}\x7F\x07" +
		"v\x02\x02~-\x03\x02\x02\x02~4\x03\x02\x02\x02~<\x03\x02\x02\x02~D\x03" +
		"\x02\x02\x02~M\x03\x02\x02\x02~V\x03\x02\x02\x02~`\x03\x02\x02\x02~d\x03" +
		"\x02\x02\x02~i\x03\x02\x02\x02~s\x03\x02\x02\x02\x7F\x06\x03\x02\x02\x02" +
		"\x80\x81\x07*\x02\x02\x81\b\x03\x02\x02\x02\x82\x83\x07+\x02\x02\x83\n" +
		"\x03\x02\x02\x02\x84\x85\x07<\x02\x02\x85\f\x03\x02\x02\x02\x86\x8E\x07" +
		"/\x02\x02\x87\x88\x07P\x02\x02\x88\x89\x07Q\x02\x02\x89\x8E\x07V\x02\x02" +
		"\x8A\x8B\x07p\x02\x02\x8B\x8C\x07q\x02\x02\x8C\x8E\x07v\x02\x02\x8D\x86" +
		"\x03\x02\x02\x02\x8D\x87\x03\x02\x02\x02\x8D\x8A\x03\x02\x02\x02\x8E\x0E" +
		"\x03\x02\x02\x02\x8F\x90\x07Q\x02\x02\x90\x94\x07T\x02\x02\x91\x92\x07" +
		"q\x02\x02\x92\x94\x07t\x02\x02\x93\x8F\x03\x02\x02\x02\x93\x91\x03\x02" +
		"\x02\x02\x94\x10\x03\x02\x02\x02\x95\x96\x07C\x02\x02\x96\x97\x07P\x02" +
		"\x02\x97\x9C\x07F\x02\x02\x98\x99\x07c\x02\x02\x99\x9A\x07p\x02\x02\x9A" +
		"\x9C\x07f\x02\x02\x9B\x95\x03\x02\x02\x02\x9B\x98\x03\x02\x02\x02\x9C" +
		"\x12\x03\x02\x02\x02\x9D\x9F\n\x04\x02\x02\x9E\xA0\n\x05\x02\x02\x9F\x9E" +
		"\x03\x02\x02\x02\xA0\xA1\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA1\xA2" +
		"\x03\x02\x02\x02\xA2\x14\x03\x02\x02\x02\xA3\xA5\t\x06\x02\x02\xA4\xA3" +
		"\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA4\x03\x02\x02\x02\xA6\xA7" +
		"\x03\x02\x02\x02\xA7\xA8\x03\x02\x02\x02\xA8\xA9\b\v\x02\x02\xA9\x16\x03" +
		"\x02\x02\x02\x0E\x02\x1B\x1D%\'+~\x8D\x93\x9B\xA1\xA6\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!QueryRecognizerLexer.__ATN) {
			QueryRecognizerLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(QueryRecognizerLexer._serializedATN));
		}

		return QueryRecognizerLexer.__ATN;
	}

}

